{"version":3,"sources":["store/explorer/explorer.types.ts","services/github-api.service.ts","components/file-explorer/file-explorer.service.ts","store/explorer/explorer.selectors.ts","store/explorer/explorer.actions.ts","store/bookmarks/bookmarks.types.ts","components/file-explorer/file-explorer.component.tsx","components/file-viewer/file-viewer.component.tsx","components/branch-selector/branch-selector.component.tsx","pages/viewer/viewer.page.tsx","components/create-badge-button/create-badge-button.component.tsx","components/search-bar/search-bar.component.tsx","store/bookmarks/bookmarks.selectors.ts","store/bookmarks/bookmarks.actions.ts","components/bookmarks/bookmarks.component.tsx","components/header/header.component.tsx","App.tsx","reportWebVitals.ts","store/bookmarks/bookmarks.reducer.ts","store/explorer/explorer.reducer.ts","store/root.reducer.ts","store/bookmarks/bookmarks.sagas.ts","shared/utils.ts","store/explorer/explorer.sagas.ts","store/root.saga.ts","store/store.ts","index.tsx"],"names":["ExplorerActionTypes","fetchRepoInfo","repoUrl","requestConfig","a","axios","get","then","response","status","data","full_name","default_branch","name","apiUrl","defaultBranch","fetchRepoContent","fetchFileContent","fileUrl","window","atob","content","fetchRepoBranches","repoApiUrl","createFileTree","gitRepoData","map","item","key","url","title","isLeaf","type","sortFileDirectory","fileTree","sort","customFileTreeSort","node1","node2","updateTreeData","currentTree","children","node","selectExplorerState","state","explorer","selectRepoUrl","createSelector","selectRepoInfo","repoInfo","selectRepoApiUrl","selectRepoName","selectSelectedFile","selectedFile","selectRepoBranch","repoBranch","BookmarksActionTypes","setRepoUrl","SetRepoUrl","payload","setRepoInfo","SetRepoInfo","setRepoBranch","branchName","SetRepoBranch","DirectoryTree","Tree","mapStateToProps","createStructuredSelector","connect","dispatch","setSelectFile","SetSelectedFile","useState","setFileTree","useEffect","initialFileTree","console","error","fetchInitialData","onExpandAsync","treeNode","childrenData","updatedFileTree","className","loadData","onSelect","selectedKeys","info","selectedFileInfo","selectedNodes","treeData","languageMap","require","fileContent","setFileContent","fileLanguage","setFileLanguage","fetchFileData","language","LangLine","withFileName","resolvedLanguageName","langDetail","aceMode","split","pop","log","options","readOnly","height","width","value","theme","Option","Select","setNewRepoBranch","isLoading","setIsLoading","branches","setBranches","result","fetchAndSetBranches","showSearch","style","placeholder","optionFilterProp","filterOption","input","option","toLowerCase","indexOf","filterSort","optionA","optionB","localeCompare","loading","notification","message","description","placement","handleSelectBranch","length","params","useParams","decodeURIComponent","repositoryUrl","pane2Style","defaultSize","localStorage","getItem","parseInt","onChange","size","setItem","modalVisible","setModalVisible","pastedUrl","setPastedUrl","handleCancel","onClick","centered","visible","onCancel","footer","e","target","copyable","usersEncodedRepoUrl","encodeURIComponent","getBadgeUrl","selectBookmarks","bookmarks","selectIsItBookmarked","undefined","find","bm","repoName","isItBookmarked","saveBookmark","bookmark","SaveBookmark","deleteBookmark","DeleteBookmark","handleSelectNewBookmark","event","pinnedRepoExtraInfo","overlay","Item","getMenu","disabled","trigger","PushpinTwoTone","InfoCircleTwoTone","twoToneColor","marginLeft","fontSize","cursor","icon","Header","App","exact","path","component","viewerPage","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","bookmarksReducer","action","filter","explorerReducer","persistConfig","storage","whitelist","rootReducer","combineReducers","persistReducer","bookmarksSagas","all","converRepoUrlToAPIUrl","replace","user","repo","onSetRepoUrl","fetchAndSaveRepoInfo","explorerSagas","takeLatest","call","put","warn","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","applyMiddleware","run","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bd2fe33.chunk.js","sourcesContent":["export enum ExplorerActionTypes {\n  SetSelectedFile = '[Explorer] Select File',\n  SetRepoUrl = '[Explorer] Set Repository URL',\n  SetRepoInfo = '[Explorer] Set Repository Info',\n  SetRepoBranch = '[Explorer] Set Repository Branch'\n};\n\nexport type SelectedFileType = {\n  url: string;\n  name: string;\n}\n\nexport type RepoInfo = {\n  apiUrl: string;\n  name: string;\n  defaultBranch: string;\n}\n\nexport interface ExplorerAction {\n  type: ExplorerActionTypes;\n  payload?: string | SelectedFileType | RepoInfo;\n}\n\nexport interface ExplorerState {\n  repoUrl: string;\n  repoInfo: RepoInfo,\n  repoBranch?: string;\n  selectedFile: SelectedFileType;\n}","import axios, { AxiosRequestConfig } from 'axios';\nimport { RepoInfo } from '../store/explorer/explorer.types';\n\nexport const fetchRepoInfo = async (repoUrl: string, requestConfig?: AxiosRequestConfig) => {\n  return axios.get(repoUrl, requestConfig)\n          .then(response => {\n            if (response.status === 200) {\n              const { full_name, default_branch } = response.data;\n              return {\n                name: full_name,\n                apiUrl: repoUrl,\n                defaultBranch: default_branch\n              } as RepoInfo;\n            }\n          });\n}\n\nexport const fetchRepoContent = async (repoUrl: string, requestConfig?: AxiosRequestConfig) => {\n  return axios.get(`${repoUrl}`, requestConfig);\n}\n\nexport const fetchFileContent = async (fileUrl: string): Promise<string> => {\n  return axios.get(fileUrl).then(({ data }) => data ? window.atob(data.content) : '');\n}\n\nexport const fetchRepoBranches = async (repoApiUrl: string) => {\n  return axios.get(`${repoApiUrl}/branches`);\n}\n","import { DataNode } from \"rc-tree/lib/interface\";\nimport { Key } from \"react\";\n\nexport const createFileTree = (gitRepoData: any[]): DataNode[] => {\n  const fileTree = gitRepoData.map<DataNode>(item => ({\n    key: item.url,\n    title: item.name,\n    isLeaf: item.type === 'file',\n  }))\n  return fileTree;\n}\n\nexport const sortFileDirectory = (fileTree: DataNode[]): DataNode[] => {\n  fileTree.sort(customFileTreeSort);\n  return fileTree;\n}\n\nconst customFileTreeSort = (node1: DataNode, node2: DataNode): number => {\n  if (!node1.isLeaf && node2.isLeaf) { return -1 }\n  else if (node1.isLeaf && !node2.isLeaf) { return 1 }\n  else return 0;\n}\n\nexport const updateTreeData = (currentTree: DataNode[], key: Key, children: DataNode[]): DataNode[] => {\n  return currentTree.map(node => {\n    if (node.key === key) {\n      return {\n        ...node,\n        children,\n      };\n    }\n    if (node.children) {\n      return {\n        ...node,\n        children: updateTreeData(node.children, key, children),\n      };\n    }\n    return node;\n  });\n}\n","import { createSelector } from 'reselect';\nimport { GlobalReduxState } from '../store.types';\nimport { ExplorerState, RepoInfo } from './explorer.types';\n\nconst selectExplorerState = (state: GlobalReduxState) => state.explorer;\n\nexport const selectRepoUrl = createSelector(\n  [selectExplorerState],\n  (state: ExplorerState) => state.repoUrl\n);\n\nexport const selectRepoInfo = createSelector(\n  [selectExplorerState],\n  (state: ExplorerState) => state.repoInfo\n);\n\nexport const selectRepoApiUrl = createSelector(\n  [selectRepoInfo],\n  (state: RepoInfo) => state.apiUrl\n);\n\nexport const selectRepoName = createSelector(\n  [selectRepoInfo],\n  (state: RepoInfo) => state.name\n);\n\nexport const selectDefaultRepoBranch = createSelector(\n  [selectRepoInfo],\n  (state: RepoInfo) => state.defaultBranch\n);\n\nexport const selectSelectedFile = createSelector(\n  [selectExplorerState],\n  (state: ExplorerState) => state.selectedFile\n);\n\nexport const selectRepoBranch = createSelector(\n  [selectExplorerState],\n  (state: ExplorerState) => state.repoBranch\n);\n","import { ExplorerActionTypes, ExplorerAction, SelectedFileType, RepoInfo } from './explorer.types';\n\nexport const setSelectedFile = (url: SelectedFileType): ExplorerAction => ({\n  type: ExplorerActionTypes.SetSelectedFile,\n  payload: url\n});\n\nexport const setRepoUrl = (url: string): ExplorerAction => ({\n  type: ExplorerActionTypes.SetRepoUrl,\n  payload: url\n});\n\nexport const setRepoInfo = (repoInfo: RepoInfo): ExplorerAction => ({\n  type: ExplorerActionTypes.SetRepoInfo,\n  payload: repoInfo\n});\n\nexport const setRepoBranch = (branchName: string): ExplorerAction => ({\n  type: ExplorerActionTypes.SetRepoBranch,\n  payload: branchName\n});\n","export enum BookmarksActionTypes {\n  SaveBookmark = '[Bookmarks] Save',\n  DeleteBookmark = '[Bookmarks] Delete'\n};\n\nexport interface BookmarksAction {\n  type: BookmarksActionTypes,\n  payload?: string | Bookmark\n}\n\nexport interface Bookmark {\n  name: string;\n  url: string;\n}\nexport interface BookmarksState {\n  bookmarks: Bookmark[]\n}","import React, { FC, Key, useEffect, useState } from 'react'\nimport { Tree } from 'antd';\nimport { DataNode, EventDataNode } from 'rc-tree/lib/interface';\nimport { fetchRepoContent } from '../../services/github-api.service';\nimport { createFileTree, sortFileDirectory, updateTreeData } from './file-explorer.service';\nimport { createStructuredSelector } from 'reselect';\nimport { selectRepoApiUrl, selectRepoBranch } from '../../store/explorer/explorer.selectors';\nimport { SelectedFileType } from '../../store/explorer/explorer.types';\nimport { setSelectedFile } from '../../store/explorer/explorer.actions';\nimport { AllActionTypes } from '../../store/store.types';\nimport { connect } from 'react-redux';\nconst { DirectoryTree } = Tree;\n\nconst FileExplorer: FC = ({ repoApiUrl, repoBranch, setSelectFile }: any) => {\n  const [fileTree, setFileTree] = useState<DataNode[]>([])\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        if (!repoApiUrl) return;\n        const response = await fetchRepoContent(`${repoApiUrl}/contents${repoBranch ? '?ref='+repoBranch : ''}`);\n        if (response.status !== 200) return;\n\n        const initialFileTree = sortFileDirectory(createFileTree(response.data));\n        setFileTree(initialFileTree);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    fetchInitialData()\n  }, [repoApiUrl, repoBranch])\n\n  const onExpandAsync = async (treeNode: EventDataNode) => {\n    try {\n      const childrenData = await fetchRepoContent(treeNode.key as string);\n      if (childrenData.status !== 200) return;\n\n      const updatedFileTree = updateTreeData(fileTree, treeNode.key as string, sortFileDirectory(createFileTree(childrenData.data)));\n      setFileTree(updatedFileTree);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const onSelect = (selectedKeys: Key[], info: any) => {\n    if (info.node.isLeaf) {\n      const selectedFileInfo: SelectedFileType = {\n        url: selectedKeys[0] as string,\n        name: info.selectedNodes[0].title\n      }\n\n      setSelectFile(selectedFileInfo);\n    }\n  }\n\n  return (\n    <div className='file-explorer'>\n      <DirectoryTree\n        loadData={onExpandAsync}\n        onSelect={onSelect}\n        treeData={fileTree}\n      >\n      </DirectoryTree>\n    </div>\n  )\n}\n\nconst mapStateToProps = createStructuredSelector<any, any>({\n  repoApiUrl: selectRepoApiUrl,\n  repoBranch: selectRepoBranch\n})\n\nconst mapDispatchToProps = (dispatch: (action: AllActionTypes) => void) => ({\n  setSelectFile: (selectedFile: SelectedFileType) => dispatch(setSelectedFile(selectedFile))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileExplorer);\n","import React, { FC, useEffect, useState } from 'react'\nimport { fetchFileContent } from '../../services/github-api.service'\nimport { LangLine } from '@itassistors/langline';\nimport { LangData } from '@itassistors/langline/dist/lib/interface/LangDataInterface';\nimport { ErrorObject } from '@itassistors/langline/dist/lib/interface/ErrorInterface';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectRepoApiUrl, selectRepoBranch, selectSelectedFile } from '../../store/explorer/explorer.selectors';\nimport { SelectedFileType } from '../../store/explorer/explorer.types';\nimport Editor from '@monaco-editor/react';\nimport './file-viewer.scss';\nconst languageMap = require('language-map');\n\nconst FileViewer: FC = ({ selectedFile, repoApiUrl, repoBranch }: any) => {\n\n  const { name, url } = selectedFile as SelectedFileType;\n\n  const [fileContent, setFileContent] = useState<string>('');\n  const [fileLanguage, setFileLanguage] = useState<string>('text');\n\n  useEffect(() => {\n    const fetchFileData = async () => {\n      try {\n        if (!url) return;\n        const fileContent = await fetchFileContent(url);\n        setFileContent(fileContent);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    fetchFileData();\n  }, [url])\n\n  useEffect(() => {\n    setFileContent('');\n    setFileLanguage('text');\n  }, [repoApiUrl, repoBranch]);\n\n  useEffect(() => {\n    const language: LangData | ErrorObject = new LangLine().withFileName(name);\n    let resolvedLanguageName = 'text';\n\n    const langDetail = languageMap[(language as LangData)?.name];\n\n    if (langDetail && 'aceMode' in langDetail) {\n      resolvedLanguageName = langDetail?.aceMode;\n    }\n\n    // Expections\n    switch (name.split('.').pop()) {\n      case 'tsx':\n      case 'ts':\n        resolvedLanguageName='typescript'\n        break;\n\n      case 'jsx':\n        resolvedLanguageName='javascript'\n        break;\n\n      case 'md':\n        resolvedLanguageName='markdown'\n        break;\n\n      default:\n        break;\n    }\n\n    setFileLanguage(resolvedLanguageName);\n    console.log(language, languageMap[(language as LangData)?.name], resolvedLanguageName);\n  }, [name]);\n\n  return (\n    <div className='file-viewer'>\n      {\n        fileContent ? (\n          <Editor\n            options={{\n              readOnly: true\n            }}\n            height='100%'\n            width='100%'\n            value={fileContent}\n            language={fileLanguage}\n            theme='vs-dark'\n          />\n        ) : null\n      }\n    </div>\n  )\n}\n\nconst mapStateToProps = createStructuredSelector<any, any>({\n  selectedFile: selectSelectedFile,\n  repoApiUrl: selectRepoApiUrl,\n  repoBranch: selectRepoBranch\n})\n\nexport default connect(mapStateToProps)(FileViewer);\n","import React, { useEffect, useState } from 'react'\nimport { notification, Select } from 'antd';\nimport { fetchRepoBranches } from '../../services/github-api.service';\nimport { createStructuredSelector } from 'reselect';\nimport { selectRepoApiUrl, selectRepoBranch } from '../../store/explorer/explorer.selectors';\nimport { connect } from 'react-redux';\nimport { ExplorerAction } from '../../store/explorer/explorer.types';\nimport { setRepoBranch } from '../../store/explorer/explorer.actions';\nconst { Option } = Select;\n\nconst BranchSelector = ({ repoApiUrl, branchName, setNewRepoBranch }: any) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [branches, setBranches] = useState([]);\n\n  useEffect(() => {\n    const fetchAndSetBranches = async (repoApiUrl: string) => {\n      setIsLoading(true);\n      const result = await fetchRepoBranches(repoApiUrl);\n      if (result.status === 200) {\n        setBranches(result.data);\n      }\n      setIsLoading(false);\n    }\n\n    fetchAndSetBranches(repoApiUrl);\n  }, [repoApiUrl])\n\n  const handleSelectBranch = (branchName: string) => {\n    setNewRepoBranch(branchName);\n    notification.info({\n      message: 'Info',\n      description: 'Switched the branch - ' + branchName,\n      placement: 'bottomRight'\n    });\n  }\n\n  return (\n    <Select\n      showSearch\n      style={{ width: 200 }}\n      placeholder=\"Search to Select\"\n      optionFilterProp=\"children\"\n      filterOption={(input, option) =>\n        option?.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      }\n      filterSort={(optionA, optionB) =>\n        optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n      }\n      loading={isLoading}\n      value={branchName}\n      onSelect={(branchName: string) => handleSelectBranch(branchName)}\n    >\n      {\n        branches.length ? (\n          branches.map(({ name }) => <Option key={name} value={name}>{name}</Option>)\n        ) : null\n      }\n  </Select>\n  )\n}\n\nconst mapStateToProps = createStructuredSelector<any, any>({\n  repoApiUrl: selectRepoApiUrl,\n  branchName: selectRepoBranch\n});\n\nconst mapDispatchToProps = (dispatch: (action: ExplorerAction) => void) => ({\n  setNewRepoBranch: (branchName: string) => dispatch(setRepoBranch(branchName))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BranchSelector);\n","import React, { FC, useEffect } from 'react'\nimport { connect } from 'react-redux';\nimport { useParams } from 'react-router';\nimport SplitPane from 'react-split-pane';\nimport FileExplorer from '../../components/file-explorer/file-explorer.component';\nimport FileViewer from '../../components/file-viewer/file-viewer.component';\nimport BranchSelector from '../../components/branch-selector/branch-selector.component';\nimport { setRepoUrl } from '../../store/explorer/explorer.actions';\nimport { AllActionTypes } from '../../store/store.types';\nimport './viewer.scss';\n\nconst ViewerPage: FC = ({ setRepoUrl }: any) => {\n\n  const params = useParams<any>();\n\n  useEffect(() => {\n    let url = decodeURIComponent(params?.repositoryUrl || '');\n    if (url) {\n      setRepoUrl(url);\n    } else {\n      setRepoUrl('https://github.com/indrajitbnikam/github-repo-explorer');\n    }\n  }, [params, setRepoUrl]);\n\n  const getDefaultSize = (): number => {\n    // returns 300px base size\n    if (!localStorage.getItem('splitPos')) return 300;\n    return parseInt(localStorage.getItem('splitPos') as string, 10)\n  }\n\n  return (\n    <div className='viewer-page-container'>\n      <SplitPane\n        split='vertical'\n        style={{ height: 'calc(100% - 73px)' }}\n        pane2Style={{ width: '100%', height: '100%' }}\n        defaultSize={getDefaultSize()}\n        onChange={(size) => localStorage.setItem('splitPos', `${size}`)} >\n          <div className='file-explorer-container'>\n            <div className='branch-selector-container'>\n              <BranchSelector />\n            </div>\n            <div className='explorer'>\n              <FileExplorer />\n            </div>\n          </div>\n          <div className='file-viewer-container'>\n            <FileViewer />\n          </div>\n      </SplitPane>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch: (action: AllActionTypes) => void) => ({\n  setRepoUrl: (url: string) => dispatch(setRepoUrl(url))\n})\n\nexport default connect(null, mapDispatchToProps)(ViewerPage);\n","import { Button, Input, Modal } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport './create-badge-button.scss'\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectRepoUrl } from '../../store/explorer/explorer.selectors';\n\nconst CreateBadgeButton = ({ repoUrl }: any) => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [pastedUrl, setPastedUrl] = useState<string>('');\n\n  useEffect(() => {\n    setPastedUrl(repoUrl);\n  }, [repoUrl, modalVisible])\n\n  const handleCancel = () => {\n    setModalVisible(false);\n  }\n\n  const getBadgeUrl = (url: string): string => {\n    const usersEncodedRepoUrl = encodeURIComponent(url);\n    const exploreBadgeUrl = 'https://img.shields.io/badge/Explore%20my%20repo%20-github--repo--explorer-green?style=flat-square&logo=github';\n    const ourProjectRepoUrl = 'https://indrajitbnikam.github.io/github-repo-explorer/#/';\n\n    const constructedBadgeText = `[![Website](${exploreBadgeUrl})](${ourProjectRepoUrl}${usersEncodedRepoUrl})`;\n    return constructedBadgeText;\n  }\n\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => setModalVisible(true)}>\n          Create a badge 🚀\n      </Button>\n      <Modal\n        title=\"Paste your github repository url here,\"\n        centered\n        visible={modalVisible}\n        onCancel={handleCancel}\n        footer={[\n          <Button key=\"ok\" type='primary' onClick={handleCancel}>\n            OK\n          </Button>\n        ]}\n      >\n        <Input\n          value={pastedUrl}\n          onChange={(e) => setPastedUrl(e.target.value)}\n          placeholder='i.e. https://github.com/indrajitbnikam/github-repo-explorer'/>\n        {\n          pastedUrl ? (\n            <>\n              <br />\n              <br />\n              <p>Copy following line to your readme.md file 👇</p>\n              <Paragraph type='secondary' copyable>\n                {getBadgeUrl(pastedUrl)}\n              </Paragraph>\n            </>\n          ) : null\n        }\n      </Modal>\n    </div>\n  )\n}\n\nconst mapStateToProps = createStructuredSelector<any, any>({\n  repoUrl: selectRepoUrl\n})\n\nexport default connect(mapStateToProps)(CreateBadgeButton)\n","import React, { FC } from 'react'\nimport { Input } from 'antd';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { setRepoUrl } from '../../store/explorer/explorer.actions';\nimport { selectRepoUrl } from '../../store/explorer/explorer.selectors';\nimport { AllActionTypes } from '../../store/store.types';\nimport './search-bar.scss';\n\nconst SearchBar: FC = ({ repoUrl, setRepoUrl }: any) => {\n  return (\n    <Input\n      placeholder='Paste your github repo url'\n      value={repoUrl}\n      onChange={(e) => setRepoUrl(e.target.value)} />\n  )\n}\n\nconst mapStateToProps = createStructuredSelector<any, any>({\n  repoUrl: selectRepoUrl\n});\n\nconst mapDispatchToProps = (dispatch: (action: AllActionTypes) => void) => ({\n  setRepoUrl: (url: string) => dispatch(setRepoUrl(url))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n","import { createSelector } from 'reselect';\nimport { selectRepoUrl } from '../explorer/explorer.selectors';\nimport { GlobalReduxState } from '../store.types';\nimport { Bookmark, BookmarksState } from './bookmarks.types';\n\nconst selectBookmarksState = (state: GlobalReduxState) => state.bookmarks;\n\nexport const selectBookmarks = createSelector(\n  [selectBookmarksState],\n  (state: BookmarksState) => state.bookmarks\n);\n\nexport const selectIsItBookmarked = createSelector(\n  [selectBookmarks, selectRepoUrl],\n  (state: Bookmark[], repoUrl: string) => state.find(bm => bm.url === repoUrl) !== undefined\n);\n","import { Bookmark, BookmarksActionTypes } from './bookmarks.types';\n\nexport const saveBookmark = (bookmark: Bookmark) => ({\n  type: BookmarksActionTypes.SaveBookmark,\n  payload: bookmark\n});\n\nexport const deleteBookmark = (url: string) => ({\n  type: BookmarksActionTypes.DeleteBookmark,\n  payload: url\n});","import React from 'react';\nimport { InfoCircleTwoTone, PushpinTwoTone } from '@ant-design/icons';\nimport { Button, Dropdown, Menu, notification, Popover, Tooltip } from 'antd';\nimport { Bookmark } from '../../store/bookmarks/bookmarks.types';\nimport './bookmarks.scss';\nimport { selectBookmarks, selectIsItBookmarked } from '../../store/bookmarks/bookmarks.selectors';\nimport { connect } from 'react-redux';\nimport { deleteBookmark, saveBookmark } from '../../store/bookmarks/bookmarks.actions';\nimport { selectRepoName, selectRepoUrl } from '../../store/explorer/explorer.selectors';\nimport { createStructuredSelector } from 'reselect';\nimport { setRepoUrl } from '../../store/explorer/explorer.actions';\nimport { AllActionTypes } from '../../store/store.types';\n\nconst Bookmarks = ({ repoName, repoUrl, bookmarks, isItBookmarked, saveBookmark, deleteBookmark, setRepoUrl }: any) => {\n\n  const handleSelectNewBookmark = (event: any) => {\n    setRepoUrl(event.key);\n    notification.info({\n      message: 'Info',\n      description: 'Switched repository!',\n      placement: 'bottomRight'\n    });\n  }\n\n  const handleToggleBookmarkState = (bookmark: Bookmark, alreadyBookmarked: boolean) => {\n    if (alreadyBookmarked) {\n      deleteBookmark(bookmark.url);\n      notification.info({\n        message: 'Unpinned repository',\n        description: bookmark.name,\n        icon: <PushpinTwoTone twoToneColor='#bebebe' />,\n        placement: 'bottomRight'\n      });\n    } else {\n      saveBookmark(bookmark);\n      notification.info({\n        message: 'Pinned repository',\n        description: bookmark.name,\n        icon: <PushpinTwoTone />,\n        placement: 'bottomRight'\n      });\n    }\n  }\n\n  const getMenu = (bookmarks: Bookmark[]) => {\n    return (\n      <Menu onClick={handleSelectNewBookmark}>\n        {\n          bookmarks.length ? (\n            bookmarks.map(bm => (\n              <Menu.Item key={bm.url}>\n                {bm.name}\n              </Menu.Item>\n            ))\n          ) : null\n        }\n      </Menu>\n    )\n  }\n\n  const pinnedRepoExtraInfo = (\n    <div>\n      <p>Pinned repos can be accessed through this dropdown.</p>\n      <p>You can unpin these anytime.</p>\n      <p>Pinned repos will be saved locally in localstorage.</p>\n    </div>\n  )\n\n  return (\n    <div className='bookmarks-container'>\n      <div className=\"bookmark-dropdown\">\n        <Dropdown overlay={getMenu(bookmarks)} disabled={!bookmarks.length} trigger={['click']}>\n          <Button>\n            <PushpinTwoTone /> Pinned repos\n          </Button>\n        </Dropdown>\n        <Popover content={pinnedRepoExtraInfo} title='What are pinned repos?' trigger='hover'>\n          <InfoCircleTwoTone twoToneColor='#bebebe' style={{marginLeft: '10px'}}/>\n        </Popover>\n      </div>\n      <div className=\"bookmark-toggle\">\n        <Tooltip title={isItBookmarked ? 'Unpin this repo' : 'Pin this repo'}>\n          <PushpinTwoTone\n            style={{fontSize: '20px', cursor: 'pointer'}}\n            twoToneColor={isItBookmarked ? undefined : '#bebebe'}\n            onClick={() => handleToggleBookmarkState({name: repoName, url: repoUrl} as Bookmark, isItBookmarked)}\n            />\n        </Tooltip>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = createStructuredSelector<any, any>({\n  repoName: selectRepoName,\n  repoUrl: selectRepoUrl,\n  bookmarks: selectBookmarks,\n  isItBookmarked: selectIsItBookmarked\n});\n\nconst mapDispatchToProps = (dispatch: (action: AllActionTypes) => void) => ({\n  saveBookmark: (bookmark: Bookmark) => dispatch(saveBookmark(bookmark)),\n  deleteBookmark: (url: string) => dispatch(deleteBookmark(url)),\n  setRepoUrl: (url: string) => dispatch(setRepoUrl(url))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bookmarks);","import React, { FC } from 'react';\nimport CreateBadgeButton from '../create-badge-button/create-badge-button.component';\nimport SearchBar from '../search-bar/search-bar.component';\nimport './header.scss';\nimport Bookmarks from '../bookmarks/bookmarks.component';\n\nconst Header: FC = () => {\n\n  return (\n    <div className='header'>\n      <div className='left-section'>\n        <div className='bookmarks'>\n          <Bookmarks />\n        </div>\n        <div className='search-bar'>\n          <SearchBar />\n        </div>\n      </div>\n      <div className='right-section'>\n        <div className='create-badge'>\n          <CreateBadgeButton />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.scss';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport viewerPage from './pages/viewer/viewer.page';\nimport Header from './components/header/header.component';\n\nfunction App() {\n  return (\n    <div className='application-container'>\n      <Header/>\n      <div className='content'>\n        <Switch>\n          <Route exact path={['/', '/:repositoryUrl']} component={viewerPage}/>\n          <Redirect path='*' to='/' />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Bookmark, BookmarksAction, BookmarksActionTypes, BookmarksState } from './bookmarks.types';\n\nconst INITIAL_STATE: BookmarksState = {\n  bookmarks: []\n};\n\nconst bookmarksReducer = (state: BookmarksState = INITIAL_STATE, action: BookmarksAction): BookmarksState => {\n  switch (action.type) {\n    case BookmarksActionTypes.SaveBookmark:\n      return {\n        ...state,\n        bookmarks: [...state.bookmarks, action.payload as Bookmark]\n      }\n\n    case BookmarksActionTypes.DeleteBookmark:\n      return {\n        ...state,\n        bookmarks: state.bookmarks.filter(bm => bm.url !== (action.payload as string))\n      }\n\n    default: return state\n  }\n}\n\nexport default bookmarksReducer;","import { ExplorerAction, ExplorerState, ExplorerActionTypes, SelectedFileType, RepoInfo } from './explorer.types';\n\nconst INITIAL_STATE: ExplorerState = {\n  repoUrl: '',\n  repoInfo: {\n    apiUrl: '',\n    name: '',\n    defaultBranch: ''\n  },\n  repoBranch: undefined,\n  selectedFile: {\n    name: '',\n    url: ''\n  }\n};\n\nconst explorerReducer = (state: ExplorerState = INITIAL_STATE, action: ExplorerAction): ExplorerState => {\n  switch (action.type) {\n    case ExplorerActionTypes.SetRepoUrl:\n      return {\n        ...state,\n        repoUrl: action.payload as string\n      };\n\n    case ExplorerActionTypes.SetRepoInfo:\n      return {\n        ...state,\n        repoInfo: action.payload as RepoInfo\n      };\n\n    case ExplorerActionTypes.SetSelectedFile:\n      return {\n        ...state,\n        selectedFile: action.payload as SelectedFileType\n      };\n\n    case ExplorerActionTypes.SetRepoBranch:\n      return {\n        ...state,\n        repoBranch: action.payload as string\n      };\n\n    default: return state;\n  }\n}\n\nexport default explorerReducer;\n","import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport bookmarksReducer from './bookmarks/bookmarks.reducer';\nimport explorerReducer from './explorer/explorer.reducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['bookmarks']\n}\n\nconst rootReducer = combineReducers({\n  bookmarks: bookmarksReducer,\n  explorer: explorerReducer\n});\n\nexport default persistReducer(persistConfig, rootReducer);","import { all } from 'redux-saga/effects';\n\nexport default function* bookmarksSagas() {\n  yield all([]);\n}","export const converRepoUrlToAPIUrl = (repoUrl: string): string => {\n  const userAndRepo = repoUrl.replace('https://github.com/', '');\n  const [user, repo] = userAndRepo.split('/');\n  return `https://api.github.com/repos/${user}/${repo}`;\n}\n","import { all, call, put, takeLatest } from 'typed-redux-saga';\nimport { fetchRepoInfo } from '../../services/github-api.service';\nimport { converRepoUrlToAPIUrl } from '../../shared/utils';\nimport { setRepoBranch, setRepoInfo } from './explorer.actions';\nimport { ExplorerAction, ExplorerActionTypes, RepoInfo } from './explorer.types';\nimport { notification } from 'antd';\n\nexport function* onSetRepoUrl() {\n  yield* takeLatest(ExplorerActionTypes.SetRepoUrl, fetchAndSaveRepoInfo);\n}\n\nfunction* fetchAndSaveRepoInfo(action: ExplorerAction): Generator {\n  try {\n    const repoApiUrl: string = converRepoUrlToAPIUrl(action.payload as string);\n    const repoInfo: RepoInfo = yield* call<(url: string, requestConfig?: any) => Promise<any>>(fetchRepoInfo, repoApiUrl);\n    yield* put(setRepoInfo(repoInfo));\n\n    const branchName: string = repoInfo.defaultBranch;\n    yield* put(setRepoBranch(branchName));\n  } catch (error) {\n    console.warn(error);\n    notification.error({\n      message: 'Oops',\n      description: 'Invalid repository URL!',\n      placement: 'bottomRight'\n    });\n  }\n}\n\nexport default function* explorerSagas() {\n  yield* all([\n    call(onSetRepoUrl)\n  ]);\n}","import { all, call } from 'redux-saga/effects';\nimport bookmarksSagas from './bookmarks/bookmarks.sagas';\nimport explorerSagas from './explorer/explorer.sagas';\n\nexport default function* rootSaga() {\n  yield all([\n    call(bookmarksSagas),\n    call(explorerSagas)\n  ]);\n}","import { createStore, applyMiddleware, Middleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './root.reducer';\nimport rootSaga from './root.saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares: Middleware[] = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga);\n\nexport const persistor = persistStore(store);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { persistor, store } from './store/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <Router>\n          <App />\n        </Router>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}